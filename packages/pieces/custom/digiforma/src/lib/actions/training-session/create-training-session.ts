import { createAction, Property } from '@activepieces/pieces-framework';
import { digiformaAuth } from '../../..';
import { digiformaCommon, makeClient } from '../../common';
import { digiformaProps } from '../../common/props';

export const createTrainingSessionAction = createAction({
  auth: digiformaAuth,
  name: 'digiforma_create_training_session',
  displayName: 'Create Training Session',
  description: 'Creates a new training session.',
  props: {
    name: Property.ShortText({
      displayName: 'Name',
      required: true,
    }),
    managerId: digiformaCommon.managerId(true, 'Administrator no.1', 'Administrator no.1'),
    secondManagerId: digiformaCommon.managerId(true, 'Administrator no.2', 'Administrator no.2'),
    programId: digiformaCommon.programId(true),

    ...digiformaProps.trainingSession,
  },
  async run(context) {
    const {
      name,
      code,
      cityCode,
      codeFundae,
      contracted,
      managerId,
      secondManagerId,
      programId,
      place,
      placeName,
      qualityAnalysis,
      qualityExpectations,
      qualitySuccessConditions,
      showDatesInExtranet,
      showPlaceInExtranet,
      showProgramInExtranet,
      showTraineePedagogicalTrackingInExtranet,
      showTraineesInExtranet,
      specialty,
      useMap,
      diploma,
      diplomaTitle,
      datesAreInterval,
      averageDurationPerDate,
      pipelineState,
      roomId,
      showRulesInExtranet,
      showSigningButtonInExtranet,
      dpc,
      inter,
      remote,
      timezone,
      trainingType,
      type,
      vaeAdmissibilityDate,
    } = context.propsValue;
    const client = makeClient(context.auth);
    return await client.createTrainingSession({
      name,
      code,
      cityCode,
      codeFundae,
      contracted,
      diploma,
      diplomaTitle,
      showSigningButtonInExtranet,
      dpc,
      inter,
      remote,
      timezone,
      trainingType,
      type,
      vaeAdmissibilityDate,
      managerId,
      secondManagerId,
      programId,
      place,
      placeName,
      qualityAnalysis,
      qualityExpectations,
      datesAreInterval,
      averageDurationPerDate,
      pipelineState,
      roomId,
      showRulesInExtranet,
      qualitySuccessConditions,
      showDatesInExtranet,
      showPlaceInExtranet,
      showProgramInExtranet,
      showTraineePedagogicalTrackingInExtranet,
      showTraineesInExtranet,
      specialty,
      useMap,
    });
  },
});
